import{_ as S}from"./D19iLc1V.js";import{g as F,u as A,s as G,v as I,h as C,x as w,j as P,w as a,q as z,o as g,a as n,b as s,i as l,c as v,k as x,d as f,y as u,m as N,l as q}from"./KKBEQJsl.js";import{_ as B}from"./CbVFHE84.js";import{_ as O}from"./CqIr5QeL.js";import"./DciHKFx3.js";const j={class:"flex flex-col md:flex-row"},H={class:"px-5 pb-5 md:w-4/5"},$=n("h2",{class:"mb-3 text-xl"},"Settings",-1),E={key:0,class:"admin-settings mb-3"},L=n("h3",{class:"mb-3"},"Admin settings",-1),R={class:"flex items-center"},T=n("p",{class:"text-amber-400"},[n("span",null,"Access tokens are required forÂ "),n("a",{class:"hover:underline underline-offset-4",href:"https://visionatrix.github.io/VixFlowsDocs/GatedModels.html",target:"_blank"},"gated models"),f(". ")],-1),D={key:1,class:"upload-flow mb-5 py-4 rounded-md"},W=n("h3",{class:"mb-3 text-xl font-bold"},"Upload Flow",-1),J=n("p",{class:"text-gray-400 text-sm mb-3"}," Upload a Visionatrix workflow file (.json) to add it to the available flows. On successful upload of the valid workflow file, the installation will start automatically. ",-1),K={class:"flex items-center space-x-3"},Q={class:"user-settings mb-3"},X=n("h3",{class:"mb-3"},"User settings",-1),le=F({__name:"index",setup(Y){A({title:"Settings - Visionatrix",meta:[{name:"description",content:"Settings - Visionatrix"}]});const k=[{label:"Settings",icon:"i-heroicons-cog-6-tooth-20-solid",to:"/settings"},{label:"Workers information",icon:"i-heroicons-chart-bar-16-solid",to:"/settings/workers"}],m=G(),e=I();function y(){console.debug("Saving settings",e.settingsMap.value),Promise.all(Object.keys(e.settingsMap).map(o=>e.settingsMap[o].admin&&m.isAdmin?e.saveGlobalSetting(e.settingsMap[o].key,e.settingsMap[o].value,e.settingsMap[o].sensitive):e.saveUserSetting(e.settingsMap[o].key,e.settingsMap[o].value))).then(()=>{u().add({title:"Settings saved",description:"Settings saved successfully"})}).catch(o=>{u().add({title:"Error saving setting",description:o.message})})}const b=C(),p=w(null),_=w(!1);function V(){const o=p.value.$refs.input.files[0]||null;if(!o){u().add({title:"No file selected",description:"Please select a file to upload"});return}_.value=!0,b.uploadFlow(o).then(t=>{const c=u();if(t&&"error"in t&&(t==null?void 0:t.error)!==""){c.add({title:"Error uploading flow",description:t.error});return}c.add({title:"Flow uploaded",description:"Flow uploaded successfully"}),p.value.$refs.input.value=""}).finally(()=>{_.value=!1})}return(o,t)=>{const c=S,U=N,d=B,r=O,h=q,M=z;return g(),P(M,{class:"lg:h-dvh"},{default:a(()=>[n("div",j,[s(c,{links:k,class:"md:w-1/5"}),n("div",H,[$,l(m).isAdmin?(g(),v("div",E,[L,n("div",R,[s(U,{name:"i-heroicons-question-mark-circle",class:"mr-2 text-amber-400"}),T]),s(r,{size:"md",class:"py-3",label:"Huggingface Auth token",description:"Bearer authentication token from your Huggingface account to allow downloading gated models with limited access"},{default:a(()=>[s(d,{modelValue:l(e).settingsMap.huggingface_auth_token.value,"onUpdate:modelValue":t[0]||(t[0]=i=>l(e).settingsMap.huggingface_auth_token.value=i),placeholder:"Huggingface Auth token",class:"w-full",type:"password",icon:"i-heroicons-shield-check",size:"md"},null,8,["modelValue"])]),_:1}),s(r,{size:"md",class:"py-3",label:"Gemini API key",description:"Global Gemini API key, required for Flows where ComfyUI-Gemini Node is used"},{default:a(()=>[s(d,{modelValue:l(e).settingsMap.gemini_token.value,"onUpdate:modelValue":t[1]||(t[1]=i=>l(e).settingsMap.gemini_token.value=i),placeholder:"Gemini API key",class:"w-full",type:"password",icon:"i-heroicons-shield-check",size:"md"},null,8,["modelValue"])]),_:1}),s(r,{size:"md",class:"py-3",label:"Proxy",description:"Proxy configuration string (to access Gemini)"},{default:a(()=>[s(d,{modelValue:l(e).settingsMap.proxy.value,"onUpdate:modelValue":t[2]||(t[2]=i=>l(e).settingsMap.proxy.value=i),placeholder:"Proxy",class:"w-full",type:"text",size:"md"},null,8,["modelValue"])]),_:1}),s(r,{size:"md",class:"py-3",label:"Ollama URL",description:"URL to server where Ollama is running, required for flows using node with it"},{default:a(()=>[s(d,{modelValue:l(e).settingsMap.ollama_url.value,"onUpdate:modelValue":t[3]||(t[3]=i=>l(e).settingsMap.ollama_url.value=i),placeholder:"Ollama URL",class:"w-full",type:"text",size:"md"},null,8,["modelValue"])]),_:1})])):x("",!0),l(m).isAdmin?(g(),v("div",D,[W,J,n("div",K,[s(d,{ref_key:"flowFileInput",ref:p,type:"file",accept:".json",class:"w-auto",onChange:o.handleFileUpload},null,8,["onChange"]),s(h,{icon:"i-heroicons-arrow-up-tray-16-solid",variant:"outline",loading:l(_),onClick:V},{default:a(()=>[f(" Upload Flow ")]),_:1},8,["loading"])])])):x("",!0),n("div",Q,[X,s(r,{size:"md",class:"py-3",label:"Gemini API key",description:"Gemini API key, required for Flows where ComfyUI-Gemini Node is used"},{default:a(()=>[s(d,{modelValue:l(e).settingsMap.gemini_token_user.value,"onUpdate:modelValue":t[4]||(t[4]=i=>l(e).settingsMap.gemini_token_user.value=i),placeholder:"Gemini API key",class:"w-full",type:"password",icon:"i-heroicons-shield-check",size:"md"},null,8,["modelValue"])]),_:1})]),s(h,{icon:"i-heroicons-check-16-solid",onClick:y},{default:a(()=>[f(" Save ")]),_:1})])])]),_:1})}}});export{le as default};
