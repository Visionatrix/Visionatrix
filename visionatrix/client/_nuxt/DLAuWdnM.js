import{_ as z}from"./DuhJnda9.js";import{g as F,u as A,v as G,x as I,y as O,h as P,z as w,q as C,i as N,w as n,s as $,o as _,a,b as o,k as s,c as v,j as x,d as f,l as q,m as B}from"./DW_22jUz.js";import{_ as j}from"./DfJUWkHn.js";import{_ as E}from"./D5ldiZSy.js";import{_ as H}from"./DhZS-L7j.js";const L={class:"flex flex-col md:flex-row"},R={class:"px-5 pb-5 md:w-4/5"},T=a("h2",{class:"mb-3 text-xl"},"Settings",-1),D={key:0,class:"admin-settings mb-3"},W=a("h3",{class:"mb-3"},"Admin settings",-1),J={class:"flex items-center"},K=a("p",{class:"text-amber-400"},[a("span",null,"Access tokens are required forÂ "),a("a",{class:"hover:underline underline-offset-4",href:"https://visionatrix.github.io/VixFlowsDocs/GatedModels.html",target:"_blank"},"gated models"),f(". ")],-1),Q={key:1,class:"upload-flow mb-5 py-4 rounded-md"},X=a("h3",{class:"mb-3 text-xl font-bold"},"Upload Flow",-1),Y=a("p",{class:"text-gray-400 text-sm mb-3"}," Upload a Visionatrix workflow file (.json) to add it to the available flows. On successful upload of the valid workflow file, the installation will start automatically. ",-1),Z={class:"flex items-center space-x-3"},ee={class:"user-settings mb-3"},te=a("h3",{class:"mb-3"},"User settings",-1),de=F({__name:"index",setup(oe){A({title:"Settings - Visionatrix",meta:[{name:"description",content:"Settings - Visionatrix"}]});const y=[{label:"Settings",icon:"i-heroicons-cog-6-tooth-20-solid",to:"/settings"},{label:"Workers information",icon:"i-heroicons-chart-bar-16-solid",to:"/settings/workers"}],p=G(),t=I(),r=O();function k(){console.debug("Saving settings",t.settingsMap),Promise.all(Object.keys(t.settingsMap).map(i=>t.settingsMap[i].admin&&p.isAdmin?t.saveGlobalSetting(t.settingsMap[i].key,t.settingsMap[i].value,t.settingsMap[i].sensitive):t.saveUserSetting(t.settingsMap[i].key,t.settingsMap[i].value))).then(()=>{r.add({title:"Settings saved",description:"Settings saved successfully"})}).catch(i=>{r.add({title:"Error saving setting",description:i.message})})}const c=P(),m=w(null),g=w(!1);function b(){const i=m.value.$refs.input.files[0]||null;if(!i){r.add({title:"No file selected",description:"Please select a file to upload"});return}g.value=!0,c.uploadFlow(i).then(e=>{if(console.debug("uploadFlow",e),e&&"detail"in e&&(e==null?void 0:e.detail)!==""){r.add({title:"Error uploading flow",description:e.detail});return}else r.add({title:"Flow uploaded",description:"Flow uploaded successfully"});m.value.$refs.input.value=""}).catch(e=>{console.debug("uploadFlow error",e),r.add({title:"Error uploading flow",description:e.message})}).finally(()=>{g.value=!1})}return C(()=>c.outputMaxSize,()=>{c.saveUserOptions()}),(i,e)=>{const V=z,M=q,d=j,u=E,h=B,U=H,S=$;return _(),N(S,{class:"lg:h-dvh"},{default:n(()=>[a("div",L,[o(V,{links:y,class:"md:w-1/5"}),a("div",R,[T,s(p).isAdmin?(_(),v("div",D,[W,a("div",J,[o(M,{name:"i-heroicons-question-mark-circle",class:"mr-2 text-amber-400"}),K]),o(u,{size:"md",class:"py-3",label:"Huggingface Auth token",description:"Bearer authentication token from your Huggingface account to allow downloading gated models with limited access"},{default:n(()=>[o(d,{modelValue:s(t).settingsMap.huggingface_auth_token.value,"onUpdate:modelValue":e[0]||(e[0]=l=>s(t).settingsMap.huggingface_auth_token.value=l),placeholder:"Huggingface Auth token",class:"w-full",type:"password",icon:"i-heroicons-shield-check",size:"md"},null,8,["modelValue"])]),_:1}),o(u,{size:"md",class:"py-3",label:"Google API key",description:"Global Google API key, required for Flows, e.g. where ComfyUI-Gemini Node is used"},{default:n(()=>[o(d,{modelValue:s(t).settingsMap.google_api_key.value,"onUpdate:modelValue":e[1]||(e[1]=l=>s(t).settingsMap.google_api_key.value=l),placeholder:"Google API key",class:"w-full",type:"password",icon:"i-heroicons-shield-check",size:"md"},null,8,["modelValue"])]),_:1}),o(u,{size:"md",class:"py-3",label:"Proxy",description:"Proxy configuration string (to access Gemini)"},{default:n(()=>[o(d,{modelValue:s(t).settingsMap.google_proxy.value,"onUpdate:modelValue":e[2]||(e[2]=l=>s(t).settingsMap.google_proxy.value=l),placeholder:"Proxy",class:"w-full",type:"text",size:"md"},null,8,["modelValue"])]),_:1}),o(u,{size:"md",class:"py-3",label:"Ollama URL",description:"URL to server where Ollama is running, required for flows using node with it"},{default:n(()=>[o(d,{modelValue:s(t).settingsMap.ollama_url.value,"onUpdate:modelValue":e[3]||(e[3]=l=>s(t).settingsMap.ollama_url.value=l),placeholder:"Ollama URL",class:"w-full",type:"text",size:"md"},null,8,["modelValue"])]),_:1}),o(u,{size:"md",class:"py-3",label:"Ollama Vision Model",description:"Override Ollama Vision model used in workflows by default"},{default:n(()=>[o(d,{modelValue:s(t).settingsMap.ollama_vision_model.value,"onUpdate:modelValue":e[4]||(e[4]=l=>s(t).settingsMap.ollama_vision_model.value=l),placeholder:"Ollama Vision Model",class:"w-full",type:"text",size:"md"},null,8,["modelValue"])]),_:1})])):x("",!0),s(p).isAdmin?(_(),v("div",Q,[X,Y,a("div",Z,[o(d,{ref_key:"flowFileInput",ref:m,type:"file",accept:".json",class:"w-auto"},null,512),o(h,{icon:"i-heroicons-arrow-up-tray-16-solid",variant:"outline",loading:s(g),onClick:b},{default:n(()=>[f(" Upload Flow ")]),_:1},8,["loading"])])])):x("",!0),a("div",ee,[te,o(u,{size:"md",class:"py-3",label:"Google API key",description:"Google API key, required for Flows where, e.g. ComfyUI-Gemini Node is used"},{default:n(()=>[o(d,{modelValue:s(t).settingsMap.google_api_key_user.value,"onUpdate:modelValue":e[5]||(e[5]=l=>s(t).settingsMap.google_api_key_user.value=l),placeholder:"Google API key",class:"w-full",type:"password",icon:"i-heroicons-shield-check",size:"md"},null,8,["modelValue"])]),_:1}),o(u,{size:"md",class:"py-3",label:"Outputs maximum image size",description:"To keep the output seamless, we limit the size of the outputs (512px by default)"},{default:n(()=>[o(U,{modelValue:s(c).$state.outputMaxSize,"onUpdate:modelValue":e[6]||(e[6]=l=>s(c).$state.outputMaxSize=l),options:["512","768","1024","1536","2048"]},null,8,["modelValue"])]),_:1})]),o(h,{icon:"i-heroicons-check-16-solid",onClick:k},{default:n(()=>[f(" Save ")]),_:1})])])]),_:1})}}});export{de as default};
